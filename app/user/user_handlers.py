import logging

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart

import config as con
import app.database.requests as rq
import app.user.user_keyboards as kb

from app.admin.admin_handlers import start_admin, back_main_menu_admin
# import app.admin.admin_keyboards as admin_kb

user_router = Router()


async def add_user(message: Message):
    user = message.from_user
    
    await rq.set_user(user_id=user.id, user_name=user.first_name)

@user_router.message(CommandStart())
async def start(message: Message):
    await add_user(message=message)

    if message.from_user.id in con.moder_id:
        await start_admin(message=message)
    else:
        await message.answer("""üíª <a href = 'https://t.me/helperforgroup201is_bot'>–°—Ç—É–¥–µ–Ω—á–∏—Å–∫–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞</a>.
–£–∑–Ω–∞–≤–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∑–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è.""", 
                                    reply_markup=kb.main_menu, 
                                    parse_mode="HTML")


# –î–∞–ª–µ–µ –≥–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

global user_checking_week_status
global user_checking_day_status


@user_router.callback_query(F.data.in_(["schlude", "back_schlude_type"]))
async def schlude(call: CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=kb.schlude_type)

    @user_router.callback_query(F.data.in_(["lessons", "back_week_type", "back_week_type_odd"]))
    async def lessons(call: CallbackQuery):
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–µ–ª–∏.", reply_markup=kb.week_type)


        @user_router.callback_query(F.data.in_(["even_week", "back_day_type"]))
        async def even_week(call: CallbackQuery):
            global user_checking_week_status
            user_checking_week_status = "–ß–µ—Ç–Ω–∞—è"
            logging.info(f"user_checking_week_status: {user_checking_week_status}")

            await call.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.", reply_markup=kb.day_type)

            @user_router.callback_query(F.data.in_(["monday", ""]))
            async def monday(call: CallbackQuery):
                global user_checking_day_status
                user_checking_day_status = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
                logging.info(F"user_checking_day_status: {user_checking_day_status}")

                await call.message.edit_text(await rq.get_schlude(type_week=user_checking_week_status,
                                            type_day=user_checking_day_status), reply_markup=kb.back_day_type)


            @user_router.callback_query(F.data.in_(["tuesday", ""]))
            async def tuesday(call: CallbackQuery):
                global user_checking_day_status
                user_checking_day_status = "–í—Ç–æ—Ä–Ω–∏–∫"
                logging.info(F"user_checking_day_status: {user_checking_day_status}")

                await call.message.edit_text(await rq.get_schlude(type_week=user_checking_week_status,
                                            type_day=user_checking_day_status), reply_markup=kb.back_day_type)


            @user_router.callback_query(F.data.in_(["wendnesday", ""]))
            async def wendnesday(call: CallbackQuery):
                global user_checking_day_status
                user_checking_day_status = "–°—Ä–µ–¥–∞"
                logging.info(F"user_checking_day_status: {user_checking_day_status}")

                await call.message.edit_text(await rq.get_schlude(type_week=user_checking_week_status,
                                            type_day=user_checking_day_status), reply_markup=kb.back_day_type)


            @user_router.callback_query(F.data.in_(["thursday", ""]))
            async def thursday(call: CallbackQuery):
                global user_checking_day_status
                user_checking_day_status = "–ß–µ—Ç–≤–µ—Ä–≥"
                logging.info(F"user_checking_day_status: {user_checking_day_status}")

                await call.message.edit_text(await rq.get_schlude(type_week=user_checking_week_status,
                                            type_day=user_checking_day_status), reply_markup=kb.back_day_type)


            @user_router.callback_query(F.data.in_(["friday", ""]))
            async def friday(call: CallbackQuery):
                global user_checking_day_status
                user_checking_day_status = "–ü—è—Ç–Ω–∏—Ü–∞"
                logging.info(F"user_checking_day_status: {user_checking_day_status}")

                await call.message.edit_text(await rq.get_schlude(type_week=user_checking_week_status,
                                            type_day=user_checking_day_status), reply_markup=kb.back_day_type)


            @user_router.callback_query(F.data.in_(["saturday", ""]))
            async def saturday(call: CallbackQuery):
                global user_checking_day_status
                user_checking_day_status = "–°—É–±–±–æ—Ç–∞"
                logging.info(F"user_checking_day_status: {user_checking_day_status}")

                await call.message.edit_text(await rq.get_schlude(type_week=user_checking_week_status,
                                            type_day=user_checking_day_status), reply_markup=kb.back_day_type)


        @user_router.callback_query(F.data.in_(["odd_week", "back_day_type_odd"]))
        async def odd_week(call: CallbackQuery):
            global user_checking_week_status
            user_checking_week_status = "–ù–µ—á–µ—Ç–Ω–∞—è"
            logging.info(f"user_checking_week_status: {user_checking_week_status}")

            await call.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.", reply_markup=kb.day_type_odd)


            @user_router.callback_query(F.data.in_(["monday_odd", ""]))
            async def monday_odd(call: CallbackQuery):
                global user_checking_day_status
                user_checking_day_status = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
                logging.info(f"user_checking_day_status: {user_checking_day_status}")

                await call.message.edit_text(await rq.get_schlude(type_week=user_checking_week_status,
                                            type_day=user_checking_day_status), reply_markup=kb.back_day_type_odd)


            @user_router.callback_query(F.data.in_(["tuesday_odd", ""]))
            async def tuesday_odd(call: CallbackQuery):
                global user_checking_day_status
                user_checking_day_status = "–í—Ç–æ—Ä–Ω–∏–∫"
                logging.info(f"user_checking_day_status: {user_checking_day_status}")

                await call.message.edit_text(await rq.get_schlude(type_week=user_checking_week_status,
                                            type_day=user_checking_day_status), reply_markup=kb.back_day_type_odd)


            @user_router.callback_query(F.data.in_(["wendnesday_odd", ""]))
            async def wendnesday_odd(call: CallbackQuery):
                global user_checking_day_status
                user_checking_day_status = "–°—Ä–µ–¥–∞"
                logging.info(f"user_checking_day_status: {user_checking_day_status}")

                await call.message.edit_text(await rq.get_schlude(type_week=user_checking_week_status,
                                            type_day=user_checking_day_status), reply_markup=kb.back_day_type_odd)


            @user_router.callback_query(F.data.in_(["thursday_odd", ""]))
            async def thursday_odd(call: CallbackQuery):
                global user_checking_day_status
                user_checking_day_status = "–ß–µ—Ç–≤–µ—Ä–≥"
                logging.info(f"user_checking_day_status: {user_checking_day_status}")

                await call.message.edit_text(await rq.get_schlude(type_week=user_checking_week_status,
                                            type_day=user_checking_day_status), reply_markup=kb.back_day_type_odd)


            @user_router.callback_query(F.data.in_(["friday_odd", ""]))
            async def friday_odd(call: CallbackQuery):
                global user_checking_day_status
                user_checking_day_status = "–ü—è—Ç–Ω–∏—Ü–∞"
                logging.info(f"user_checking_day_status: {user_checking_day_status}")

                await call.message.edit_text(await rq.get_schlude(type_week=user_checking_week_status,
                                            type_day=user_checking_day_status), reply_markup=kb.back_day_type_odd)


            @user_router.callback_query(F.data.in_(["saturday_odd", ""]))
            async def saturday_odd(call: CallbackQuery):
                global user_checking_day_status
                user_checking_day_status = "–°—É–±–±–æ—Ç–∞"
                logging.info(f"user_checking_day_status: {user_checking_day_status}")

                await call.message.edit_text(await rq.get_schlude(type_week=user_checking_week_status,
                                            type_day=user_checking_day_status), reply_markup=kb.back_day_type_odd)


    @user_router.callback_query(F.data.in_(["calls"]))
    async def calls(call: CallbackQuery):
        await call.message.edit_text(await rq.get_time_lesson(), reply_markup=kb.back_schlude_type)


@user_router.callback_query(F.data.in_(["order_certificates"]))
async def order_certificates(call: CallbackQuery):
    await call.message.edit_text("–ó–∞–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π–¥—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.", reply_markup=kb.order_certificates)


@user_router.callback_query(F.data.in_(["profile"]))
async def profile(call: CallbackQuery):
    await call.message.edit_text(await rq.get_profile(user_id=call.from_user.id), reply_markup=kb.back_main_menu)


@user_router.callback_query(F.data.in_(["about_us"]))
async def about_us(call: CallbackQuery):
    await call.message.edit_text("unknow", reply_markup=kb.back_main_menu)


# –î–∞–ª–µ–µ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏—è


@user_router.callback_query(F.data == "back_main_menu")
async def back_main_menu(call: CallbackQuery):
    if call.from_user.id in con.moder_id:
        await back_main_menu_admin(call)
    else:
        await call.message.edit_text("""üíª <a href = 'https://t.me/helperforgroup201is_bot'>–°—Ç—É–¥–µ–Ω—á–∏—Å–∫–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞</a>.
–£–∑–Ω–∞–≤–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∑–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è.""", 
                                    reply_markup=kb.main_menu, 
                                    parse_mode="HTML")
        

'''@user_router.message()
async def handle_unknown_message(message: Message):
    await message.answer("–ü—Ä–æ—Å—Ç–∏ —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª! –ü–æ–∂–∞–ª—É—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –∏—Ö –Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–π ‚Ä∫‚Ä∫‚Ä∫ /start")
    logging.info(f"Unknow message, @{(message.from_user.first_name).lower()}. Message: {message.text}")'''